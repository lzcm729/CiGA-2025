[gd_resource type="VisualShader" load_steps=23 format=3 uid="uid://1baowoec7nhf"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hpmvcximw6u"]

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_boxwcgir3iu0g"]
expanded_output_ports = [0]
constant = Vector3(0, 1, 0)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_x5e1mvjqpd3f"]
parameter_name = "HueShift"
default_value_enabled = true

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ch13yhxsl5sf1"]
size = Vector2(980, 420)
expression = "//Desaturation
output0 = mix(input0.xyz, vec3(dot( input0.xyz, vec3(0.300000,0.590000,0.110000))), input1.xyz );
"

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_ct75bky65mcx1"]
expanded_output_ports = [0]
constant = Vector3(0.029554, 0.104167, 0.014106)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bpwv6cr08ovjd"]
parameter_name = "Desaturation"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_8gooa06gbd1g"]
parameter_name = "BaseColor_Strength"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_b0aygc6c4v23s"]
parameter_name = "Opacity"
default_value_enabled = true
default_value = 0.187675

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_bohgwpbanys2w"]
expanded_output_ports = [0]
source = 5
texture_type = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_bohgxb703snj8"]
parameter_name = "Opacity_Map"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_di6phi72ch8fa"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_cjxdxssviktc2"]
parameter_name = "Emissive"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_fh2cqmsxweui"]
parameter_name = "Roughness"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeVec4Parameter" id="VisualShaderNodeVec4Parameter_gs1hef0s10sv"]
expanded_output_ports = [0]
parameter_name = "Color"
default_value_enabled = true
default_value = Vector4(0.358842, 1, 0.315188, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_doiabrgicypbq"]
constant = 0.3333

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_di5tqjynoeggw"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_dtls52yckp7i8"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_d34cuoatj3r1q"]
size = Vector2(980, 630)
expression = "//RotateAboutAxis:6(HueShift)
float angle = input1 * 6.28318548;
vec4 AxisAngle = vec4( input0, angle );
output0 = RotateAboutAxis( AxisAngle, input2, input3 );"

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_xmeahalnwuaf"]
default_input_values = [0, Vector3(0, 1, 0)]

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_bowx5c7eluy8f"]
expanded_output_ports = [0]
constant = Vector3(1, 1, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_sdfpv521snga"]

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_dv0ojb11qoylq"]
size = Vector2(940, 380)
expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha;

uniform vec4 Color = vec4(0.358842, 1.000000, 0.315188, 1.000000);
uniform float HueShift = 0.0;
uniform float Desaturation = 1.0;
uniform float BaseColor_Strength = 1.0;
uniform sampler2D Opacity_Map : source_color;
uniform float Roughness = 1.0;
uniform float Emissive = 0.0;


// GlobalExpression:0
	//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
	float saturate(float val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 saturate2(vec2 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec3 saturate3(vec3 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 mul( mat2 mat, vec2 vector )
	{
		return mat * vector;
	}
	float rcp(float val)
	{
		return 1.0 / val;
	}
	void sincos( float x, out float s, out float c )
	{
		s = sin(x);
		c = cos(x);
	}
	vec2 UnitVectorToOctahedron( vec3 Nparam )
	{
	Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
	if( Nparam.z <= 0.0 )
	{
		vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
	}
	return Nparam.xy;
	}
	vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
	{
	vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	vec3 UAxis = Position - ClosestPointOnAxis;
	vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
	vec3 R = UAxis * CosAngle + VAxis * SinAngle;
	vec3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
	}
	vec3 hash_noise_range_UTG( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
	}
	

void fragment() {
// Vector4Parameter:3
	vec4 n_out3p0 = Color;


// Vector3Constant:8
	vec3 n_out8p0 = vec3(1.000000, 1.000000, 1.000000);


// VectorFunc:7
	vec3 n_out7p0 = normalize(n_out8p0);


// FloatParameter:12
	float n_out12p0 = HueShift;


// FloatConstant:10
	float n_out10p0 = 0.000000;


// Vector3Constant:14
	vec3 n_out14p0 = vec3(0.029554, 0.104167, 0.014106);


// FloatParameter:15
	float n_out15p0 = Desaturation;


	vec3 n_out13p0;
// Expression:13
	n_out13p0 = vec3(0.0, 0.0, 0.0);
	{
		//Desaturation
		n_out13p0 = mix(n_out14p0.xyz, vec3(dot( n_out14p0.xyz, vec3(0.300000,0.590000,0.110000))), vec3(n_out15p0).xyz );
		
	}


	vec3 n_out6p0;
// Expression:6
	n_out6p0 = vec3(0.0, 0.0, 0.0);
	{
		//RotateAboutAxis:6(HueShift)
		float angle = n_out12p0 * 6.28318548;
		vec4 AxisAngle = vec4( n_out7p0, angle );
		n_out6p0 = RotateAboutAxis( AxisAngle, vec3(n_out10p0), n_out13p0 );
	}


// VectorOp:5
	vec3 n_out5p0 = n_out6p0 + n_out13p0;


// FloatParameter:16
	float n_out16p0 = BaseColor_Strength;


// VectorOp:4
	vec3 n_out4p0 = n_out5p0 * vec3(n_out16p0);


// VectorOp:2
	vec3 n_out2p0 = vec3(n_out3p0.xyz) * n_out4p0;


	vec4 n_out18p0;
// Texture2D:18
	n_out18p0 = texture(Opacity_Map, UV);


// FloatParameter:21
	float n_out21p0 = Roughness;


// FloatParameter:20
	float n_out20p0 = Emissive;


// FloatConstant:33
	float n_out33p0 = 0.333300;


// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out18p0.x;
	ROUGHNESS = n_out21p0;
	EMISSION = vec3(n_out20p0);
	ALPHA_SCISSOR_THRESHOLD = n_out33p0;


}
"
graph_offset = Vector2(-523.783, 120.943)
modes/cull = 2
flags/depth_prepass_alpha = true
nodes/vertex/0/position = Vector2(0, 0)
nodes/vertex/34/node = SubResource("VisualShaderNodeGlobalExpression_dv0ojb11qoylq")
nodes/vertex/34/position = Vector2(264, 288)
nodes/vertex/34/size = Vector2(940, 380)
nodes/vertex/34/input_ports = ""
nodes/vertex/34/output_ports = ""
nodes/vertex/34/expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"
nodes/fragment/0/position = Vector2(0, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeVectorOp_di6phi72ch8fa")
nodes/fragment/2/position = Vector2(-26, -381)
nodes/fragment/3/node = SubResource("VisualShaderNodeVec4Parameter_gs1hef0s10sv")
nodes/fragment/3/position = Vector2(-268, -595)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_di5tqjynoeggw")
nodes/fragment/4/position = Vector2(-192, -211)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorOp_dtls52yckp7i8")
nodes/fragment/5/position = Vector2(-384, 153)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_d34cuoatj3r1q")
nodes/fragment/6/position = Vector2(-747, 27)
nodes/fragment/6/size = Vector2(980, 630)
nodes/fragment/6/input_ports = "0,4,input0;1,0,input1;2,4,input2;3,4,input3;"
nodes/fragment/6/output_ports = "0,4,output0;"
nodes/fragment/6/expression = "//RotateAboutAxis:6(HueShift)
float angle = input1 * 6.28318548;
vec4 AxisAngle = vec4( input0, angle );
output0 = RotateAboutAxis( AxisAngle, input2, input3 );"
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorFunc_xmeahalnwuaf")
nodes/fragment/7/position = Vector2(-1075, -307)
nodes/fragment/8/node = SubResource("VisualShaderNodeVec3Constant_bowx5c7eluy8f")
nodes/fragment/8/position = Vector2(-1267, -307)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatConstant_sdfpv521snga")
nodes/fragment/9/position = Vector2(-1267, -115)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatConstant_hpmvcximw6u")
nodes/fragment/10/position = Vector2(-1267, 96)
nodes/fragment/11/node = SubResource("VisualShaderNodeVec3Constant_boxwcgir3iu0g")
nodes/fragment/11/position = Vector2(-1286, 192)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatParameter_x5e1mvjqpd3f")
nodes/fragment/12/position = Vector2(-537, -153)
nodes/fragment/13/node = SubResource("VisualShaderNodeExpression_ch13yhxsl5sf1")
nodes/fragment/13/position = Vector2(-691, -345)
nodes/fragment/13/size = Vector2(980, 420)
nodes/fragment/13/input_ports = "0,4,input0;1,4,input1;"
nodes/fragment/13/output_ports = "0,4,output0;"
nodes/fragment/13/expression = "//Desaturation
output0 = mix(input0.xyz, vec3(dot( input0.xyz, vec3(0.300000,0.590000,0.110000))), input1.xyz );
"
nodes/fragment/14/node = SubResource("VisualShaderNodeVec3Constant_ct75bky65mcx1")
nodes/fragment/14/position = Vector2(-921, -576)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_bpwv6cr08ovjd")
nodes/fragment/15/position = Vector2(-729, -211)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatParameter_8gooa06gbd1g")
nodes/fragment/16/position = Vector2(-384, -134)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_b0aygc6c4v23s")
nodes/fragment/17/position = Vector2(-326, 364)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture_bohgwpbanys2w")
nodes/fragment/18/position = Vector2(-345, 576)
nodes/fragment/19/node = SubResource("VisualShaderNodeTexture2DParameter_bohgxb703snj8")
nodes/fragment/19/position = Vector2(-1185, 576)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatParameter_cjxdxssviktc2")
nodes/fragment/20/position = Vector2(-576, 307)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatParameter_fh2cqmsxweui")
nodes/fragment/21/position = Vector2(-576, 115)
nodes/fragment/33/node = SubResource("VisualShaderNodeFloatConstant_doiabrgicypbq")
nodes/fragment/33/position = Vector2(-240, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 4, 0, 6, 0, 5, 0, 7, 0, 6, 0, 8, 0, 7, 0, 12, 0, 6, 1, 10, 0, 6, 2, 13, 0, 6, 3, 14, 0, 13, 0, 15, 0, 13, 1, 13, 0, 5, 1, 16, 0, 4, 1, 21, 0, 0, 3, 20, 0, 0, 5, 18, 0, 0, 1, 19, 0, 18, 2, 33, 0, 0, 19)
