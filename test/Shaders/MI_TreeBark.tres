[gd_resource type="VisualShader" load_steps=12 format=3 uid="uid://b7jixqdgfqx8d"]

[ext_resource type="Texture2D" uid="uid://cbfatv4aw18i8" path="res://test/Textures/Trees/tree_mangoBark_DIF.png" id="1_b4m54"]
[ext_resource type="Texture2D" uid="uid://oplxf2spyt06" path="res://test/Textures/Trees/tree_mangoBark_DSP.png" id="3_dql3i"]
[ext_resource type="Texture2D" uid="uid://crpj8f6e23hac" path="res://test/Textures/Trees/tree_mangoBark_SPC.png" id="4_co8so"]

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_dtf4n16adj36k"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0.5, 0.5, 0.5), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 2

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_f3v7qcrkvnxr"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_c24ejld7jv3wn"]
expanded_output_ports = [0]
texture = ExtResource("1_b4m54")
texture_type = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_c25cly24fmxsq"]
size = Vector2(980, 1250)
expression = "//NormalTexture:3(null)
vec4 Normal3 = texture( input2, UV );
Normal3 = Normal3 * vec4(2, 2, 2, 2) - vec4(1, 1, 1, 1);
output0 = Normal3.xyz;
output1 = Normal3.x;
output2 = Normal3.y;
output3 = Normal3.z;
output3 = Normal3.w;
output5 = Normal3;
"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_c25cntvdp3g8p"]
parameter_name = "Generated_tree_mangoBark_NMM"
texture_type = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_c24uuco88g0sp"]
expanded_output_ports = [0]
texture = ExtResource("3_dql3i")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_c23waoue5sphk"]
expanded_output_ports = [0]
texture = ExtResource("4_co8so")
texture_type = 1

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_qibhjvjv5pfj"]
size = Vector2(940, 380)
expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha;

uniform sampler2D tex_frg_2 : source_color;
uniform sampler2D tex_frg_5 : source_color;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D Generated_tree_mangoBark_NMM : hint_normal;


// GlobalExpression:0
	//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
	float saturate(float val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 saturate2(vec2 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec3 saturate3(vec3 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 mul( mat2 mat, vec2 vector )
	{
		return mat * vector;
	}
	float rcp(float val)
	{
		return 1.0 / val;
	}
	void sincos( float x, out float s, out float c )
	{
		s = sin(x);
		c = cos(x);
	}
	vec2 UnitVectorToOctahedron( vec3 Nparam )
	{
	Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
	if( Nparam.z <= 0.0 )
	{
		vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
	}
	return Nparam.xy;
	}
	vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
	{
	vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	vec3 UAxis = Position - ClosestPointOnAxis;
	vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
	vec3 R = UAxis * CosAngle + VAxis * SinAngle;
	vec3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
	}
	vec3 hash_noise_range_UTG( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
	}
	

void fragment() {
// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Clamp:18
	float n_in18p1 = 0.00000;
	float n_in18p2 = 1.00000;
	float n_out18p0 = clamp(n_out6p0.x, n_in18p1, n_in18p2);


	vec3 n_out3p0;
	float n_out3p1;
	float n_out3p2;
	float n_out3p3;
	float n_out3p4;
	vec4 n_out3p5;
// Expression:3
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	n_out3p1 = 0.0;
	n_out3p2 = 0.0;
	n_out3p3 = 0.0;
	n_out3p4 = 0.0;
	n_out3p5 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		//NormalTexture:3(null)
		vec4 Normal3 = texture( Generated_tree_mangoBark_NMM, UV );
		Normal3 = Normal3 * vec4(2, 2, 2, 2) - vec4(1, 1, 1, 1);
		n_out3p0 = Normal3.xyz;
		n_out3p1 = Normal3.x;
		n_out3p2 = Normal3.y;
		n_out3p3 = Normal3.z;
		n_out3p3 = Normal3.w;
		n_out3p5 = Normal3;
		
	}


// MultiplyAdd:17
	vec3 n_in17p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_in17p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out17p0 = (n_out3p0 * n_in17p1) + n_in17p2;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ROUGHNESS = n_out5p0.x;
	SPECULAR = n_out18p0;
	NORMAL_MAP = n_out17p0;


}
"
graph_offset = Vector2(-523.783, 120.943)
flags/depth_prepass_alpha = true
nodes/vertex/0/position = Vector2(0, 0)
nodes/vertex/19/node = SubResource("VisualShaderNodeGlobalExpression_qibhjvjv5pfj")
nodes/vertex/19/position = Vector2(264, 288)
nodes/vertex/19/size = Vector2(940, 380)
nodes/vertex/19/input_ports = ""
nodes/vertex/19/output_ports = ""
nodes/vertex/19/expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"
nodes/fragment/0/position = Vector2(0, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_c24ejld7jv3wn")
nodes/fragment/2/position = Vector2(-288, -172)
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_c25cly24fmxsq")
nodes/fragment/3/position = Vector2(-462, 570)
nodes/fragment/3/size = Vector2(980, 1250)
nodes/fragment/3/input_ports = "0,3,input0;1,0,input1;2,8,input2;"
nodes/fragment/3/output_ports = "0,4,output0;1,0,output1;2,0,output2;3,0,output3;4,0,output4;5,5,output5;"
nodes/fragment/3/expression = "//NormalTexture:3(null)
vec4 Normal3 = texture( input2, UV );
Normal3 = Normal3 * vec4(2, 2, 2, 2) - vec4(1, 1, 1, 1);
output0 = Normal3.xyz;
output1 = Normal3.x;
output2 = Normal3.y;
output3 = Normal3.z;
output3 = Normal3.w;
output5 = Normal3;
"
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_c25cntvdp3g8p")
nodes/fragment/4/position = Vector2(-1302, 570)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_c24uuco88g0sp")
nodes/fragment/5/position = Vector2(-278, 98)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_c23waoue5sphk")
nodes/fragment/6/position = Vector2(-288, 403)
nodes/fragment/17/node = SubResource("VisualShaderNodeMultiplyAdd_dtf4n16adj36k")
nodes/fragment/17/position = Vector2(-240, 0)
nodes/fragment/18/node = SubResource("VisualShaderNodeClamp_f3v7qcrkvnxr")
nodes/fragment/18/position = Vector2(-240, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 5, 0, 0, 3, 6, 0, 18, 0, 3, 0, 17, 0, 4, 0, 3, 2, 17, 0, 0, 9, 18, 0, 0, 4)
