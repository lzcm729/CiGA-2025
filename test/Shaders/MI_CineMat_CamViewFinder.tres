[gd_resource type="VisualShader" load_steps=3 format=3 uid="uid://c33qgs64eutgj"]

[sub_resource type="VisualShaderNodeVec4Parameter" id="VisualShaderNodeVec4Parameter_gsj4e8g8ufx6"]
expanded_output_ports = [0]
parameter_name = "Color"
default_value_enabled = true
default_value = Vector4(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_bi1jh2krd2e3j"]
size = Vector2(940, 380)
expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha;

uniform vec4 Color = vec4(0.000000, 0.000000, 0.000000, 1.000000);


// GlobalExpression:0
	//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
	float saturate(float val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 saturate2(vec2 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec3 saturate3(vec3 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 mul( mat2 mat, vec2 vector )
	{
		return mat * vector;
	}
	float rcp(float val)
	{
		return 1.0 / val;
	}
	void sincos( float x, out float s, out float c )
	{
		s = sin(x);
		c = cos(x);
	}
	vec2 UnitVectorToOctahedron( vec3 Nparam )
	{
	Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
	if( Nparam.z <= 0.0 )
	{
		vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
	}
	return Nparam.xy;
	}
	vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
	{
	vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	vec3 UAxis = Position - ClosestPointOnAxis;
	vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
	vec3 R = UAxis * CosAngle + VAxis * SinAngle;
	vec3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
	}
	vec3 hash_noise_range_UTG( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
	}
	

void fragment() {
// Vector4Parameter:2
	vec4 n_out2p0 = Color;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);


}
"
graph_offset = Vector2(-523.783, 120.943)
flags/depth_prepass_alpha = true
nodes/vertex/0/position = Vector2(0, 0)
nodes/vertex/13/node = SubResource("VisualShaderNodeGlobalExpression_bi1jh2krd2e3j")
nodes/vertex/13/position = Vector2(264, 288)
nodes/vertex/13/size = Vector2(940, 380)
nodes/vertex/13/input_ports = ""
nodes/vertex/13/output_ports = ""
nodes/vertex/13/expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"
nodes/fragment/0/position = Vector2(0, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeVec4Parameter_gsj4e8g8ufx6")
nodes/fragment/2/position = Vector2(-307, -19)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)
